// =================================================================================//	CDocumentApp.h	 				©1996-1998 Metrowerks Inc. All rights reserved.// =================================================================================#pragma once#include <PP_Prefix.h>#include <LDocApplication.h>#include "CToolPalette.h"#include "CPalette.h"#include "DM.h"#include "CCatalog.h"#include "CCatalogWin.h"#include "LPreferencesFile.h"class CDocumentApp : public PP_PowerPlant::LDocApplication {public:							CDocumentApp();			// constructor registers PPobs	virtual 				~CDocumentApp();		// stub destructor	// this overriding method handles application commands	virtual Boolean		ObeyCommand(PP_PowerPlant::CommandT inCommand, void* ioParam);		// this overriding method returns the status of menu items	virtual void		FindCommandStatus(PP_PowerPlant::CommandT inCommand,								Boolean &outEnabled, Boolean &outUsesMark,								PP_PowerPlant::Char16 &outMark, Str255 outName);	LWindow *SelectOrCreate(int id, LCommander *commander);static LPane *FindPaneInMyWindow(LPane *pane, int id);static LPane *GetTopPane(LPane *pane);CToolPalette *GetPalettePtr() { return pal; }//BUNNYCPalette *GetCPalettePtr() {	return bunpal;}Boolean HandleKeyPress(	const EventRecord	&inKeyEvent);// BUNNYPicHandle getDataModel();void setDataModel(PicHandle handle);DM* getData(); //Added for testing of CCanvas AJ 3/1LPane* CreateCCanv(int numToAssign); //ibid AJ 3/1LPane*  CreateCPos(); //ibid AJ 3/2bool inPlay();	virtual DM*				GetData(); // suz bunnyvirtual DM*GetDataBak() { return mDataBak; }CCatalog *getCatalog() { return catalog; }CCatalogWin *getCatalogWin() { return catalogWin; }void AddResourceToDM(DataIDT type, Handle newHandle);bool JumpToPage(int pageToJump);bool JumpToPage(ConstStringPtr name);void getCurrentPageName(StringPtr pageName);void getCurrentPageNum(Int32 &num);void SwitchPlayMode();void SetDirty(bool dirty, bool override = false);bool GetDirty() { return mIsDirty; }void MakeEditMode();//LDocument *getBunnyDoc() { return bDoc; }LPane *getCanvas() {	return LWindow::FindWindowByID(kBunnyWindowID)->FindPaneByID(kCanvasID);}protected:	virtual void			StartUp();				// override startup functions	virtual void Initialize();		// this overriding method is called when the FileMenu ->Open items is selected.	virtual void			OpenDocument( FSSpec *inMacFSSpec );		// this method creates a new instance of a document	virtual PP_PowerPlant::LModelObject *	MakeNewDocument();		// this method displays the StandardFile Open dialog	virtual void			ChooseDocument();		void ShowAboutBox();	void DoPaste(); // BUNNY	void DeleteShapeFromPage(StringPtr shapeName);	Int32 createUP();	private:	CToolPalette *pal;		bool mShiftDown;		CPalette *bunpal;	PicHandle newPict;	bool playMode;	DM* mData; // suz bunny	DM* mDataBak;	CCatalog *catalog;	CCatalogWin *catalogWin;	PP_PowerPlant::LDocument	*bDoc;	LFile *mFile;	LPreferencesFile *mPrefsFile;	bool mIsDirty;};