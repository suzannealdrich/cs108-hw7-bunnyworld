#include "CResDraw.h"#include "MiniConstants.h"#include <UGAColorRamp.h>/* This is just a pane that's designed to draw a CShape's picture	resource if it has one; otherwise it'll draw a grey square		You can also set it's handle directly. It will first try	the shape, but if it's null then it'll try the handle.*/CResDraw::CResDraw(LStream *inStream) : LPane(inStream) {	shape = NULL;	handle = NULL;}void CResDraw::setShape(CShape *shape) { this->shape = shape; }void CResDraw::setHandle(PicHandle handle) { 	this->handle = handle; }// Now it sizes it's frame to be proportional to the picturevoid CResDraw::sizeToShape() {	PicHandle picture;	if (shape || handle){		if (shape) shape->getPicHandle(picture);		else picture = (PicHandle)handle;		if (picture) {						Rect picFrame = (**((PicHandle)picture)).picFrame;			Rect myFrame;			CalcLocalFrameRect(myFrame);				int width = picFrame.right - picFrame.left;				int height = picFrame.bottom - picFrame.top;				int mywidth = myFrame.right - myFrame.left;				int myheight = myFrame.bottom - myFrame.top;																LView *superview = GetSuperView();				Rect superRect;				superview->CalcLocalFrameRect(superRect);				int supWidth = superRect.right - superRect.left;				int supHeight = superRect.bottom - superRect.top;				double scaleFactor;								if (height>width) {					 scaleFactor = (double)supHeight / (double)height;				} else {					 scaleFactor = (double)supWidth / (double)width;				}				if (scaleFactor < 1.0) {					 width *= scaleFactor;					 height *= scaleFactor;				}												picFrame.right = picFrame.left + width;				picFrame.bottom = picFrame.top + height;								int newWidth = picFrame.right - picFrame.left; 				int newHeight = picFrame.bottom - picFrame.top;								if (mywidth != newWidth || myheight != newHeight) {					 ResizeFrameTo(newWidth, newHeight , false);					PlaceInSuperFrameAt((supWidth - newWidth) * 0.5, (supHeight - newHeight) * 0.5, false);				}		}	}}void CResDraw::DrawSelf() {	PicHandle picture;	if (shape){		shape->getPicHandle(picture);	} else if (handle) {		picture = handle;	} else {		picture = NULL;	}		sizeToShape();				Rect pictFrame;	CalcLocalFrameRect(pictFrame);		if (picture) {		::DrawPicture(picture,&pictFrame);	} else {//		::RGBForeColor(&kGreyRGB);		char	index = colorRamp_Gray1;		if (IsActive() && IsEnabled()) {			index = colorRamp_Gray2;		}		RGBColor gray = UGAColorRamp::GetColor(index);		::RGBForeColor(&gray);		::PaintRect(&pictFrame);	}}