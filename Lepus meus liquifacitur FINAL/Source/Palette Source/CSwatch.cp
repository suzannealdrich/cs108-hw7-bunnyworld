#include "CSwatch.h"#include <UGraphicUtils.h>#include <UGAColorRamp.h>#include <UDrawingState.h>#include <UDrawingUtils.h>#include <ColorPicker.h>#include <UQDOperators.h>voidCSwatch::DrawSelf (){		::PenNormal();	ApplyForeAndBackColors ();		Rect frame;	CalcLocalFrameRect ( frame );		::EraseRect ( &frame );						// Start out by erasing the whole control												// Setup a device loop so that we can handle												// drawing at the correct bit depth	StColorDrawLoop	theLoop ( frame );	SInt16					depth;	while ( theLoop.NextDepth ( depth )) {		RGBColor	tempColor;		Rect		localFrame = frame;	/* Comment out the shadow drawing stuff		::InsetRect ( &localFrame, 1, 1 );														// First we are going to draw a little shadow												// under the color swatch		::OffsetRect ( &localFrame, 1, 1 );		tempColor = IsEnabled () && IsActive () ? (depth < 4 ? Color_Black :							UGAColorRamp::GetColor(6)) : (depth < 4 ? Color_Black :								UGAColorRamp::GetColor(4));		::RGBForeColor ( &tempColor );		if ( depth < 4 )			::PenPat ( &UQDGlobals::GetQDGlobals()->gray );		::PaintRect ( &localFrame );		::OffsetRect ( &localFrame, -1, -1 );		::PaintRect ( &localFrame );		::OffsetRect ( &localFrame, -1, -1 );*/														// Then we paint the swatch color, either hilited												// if it is being pushed, normal or dimmed		if ( depth >= 4 ) {				// COLOR					::PenNormal ();												// Setup the swatch color			if ( IsEnabled () && IsPushed ()) {// Don't offset		::OffsetRect ( &localFrame, 2, 2 );								if ( mSwatchColor == Color_Black) {					tempColor = Color_White;									} else {					tempColor = UGraphicUtils::Darken ( mSwatchColor );				}							} else {							tempColor = IsEnabled () && IsActive () ? mSwatchColor :												UGraphicUtils::Lighten (mSwatchColor);			}						::RGBForeColor ( &tempColor );			::PaintRect ( &localFrame );															// Now we frame the color swatch			tempColor = IsEnabled () && IsActive () ? Color_Black : 																UGAColorRamp::GetColor(7);			::RGBForeColor ( &Color_White );			::FrameRect ( &localFrame );					} else {								// BLACK & WHITE			::RGBForeColor ( &Color_Black );			if ( IsEnabled () && IsActive ())				::PenPat ( &UQDGlobals::GetQDGlobals()->gray );			::FrameRect ( &localFrame );														// Paint the swatch color			::InsetRect ( &localFrame, 2, 2 );			::RGBForeColor ( &mSwatchColor );			::PaintRect ( &localFrame );		}	}}