#pragma once#include "LPane.h"#include "LCommander.h"#include "MiniConstants.h"#include "CShapeStore.h"#include <TArray.h>#include "CScriptAction.h"//#include "CPosessions.h"// For RT shape constructionstruct CShapeInfo {	Point start;	Point end;	RGBColor frameC;	RGBColor fillC;	SPaneInfo paneInfo;};struct SShapeInfo {	Point start;	Point end;	RGBColor frameC;	RGBColor fillC; };/* CShape * -----------------   Definition for CShape, the superclass for all the shapes to be    made in the program. */class CShape : public LPane, public LCommander {	public:		CShape(LStream *inStream);		CShape(const CShapeInfo &shapeInfo);		~CShape();		void FinishCreateSelf();				Rect ShapeFrameRect();		Rect ShapeRect();		bool Resize(const SMouseDownEvent &inMouseDown, int whichKnob = kknobEnd, bool isUndoable = false);		bool Move(const SMouseDownEvent &inMouseDown);		void SetStartEnd(Point newStart, Point newEnd, bool considerKnob = true);		bool ShapeShifter(const SMouseDownEvent &inMouseDown, bool considerKnob, int whichKnob = kknobEnd);		void MoveBack(int oH, int oV, bool t);		bool EnsureShapeWithinMouse(Point cp, Point& newStart, Point& newEnd,Rect r);		void OrientPointsFromRect(Rect r, Point& s, Point& e);		void SetMoveBetweenPWin(bool toPWin, Point &a, Point &b,Point &curPoint);						void CenterRect(Rect& r, Point p);		bool Within(int a, int b, int target);		void SetFrameColor();		void SetFillColor();		void DrawSelf();		virtual void DrawMyShape();		void DrawResizeKnobs();		void DrawResizeKnobStart();		void DrawResizeKnobEnd();		void DrawKnobHelper(Point startingPoint);		void BeTarget();		void DontBeTarget();		virtual bool IsClickOnKnob(int whichKnob, Point point);		virtual bool IsClickOnObject(Point point);		virtual int ShapeID() { return 0; }		void DeleteMyself();		Boolean		HandleKeyPress(			const EventRecord	&inKeyEvent);		Boolean		ObeyCommand(			PP_PowerPlant::CommandT	inCommand,			void					*ioParam);		void		FindCommandStatus(			PP_PowerPlant::CommandT	inCommand,			Boolean					&outEnabled,			Boolean					&outUsesMark,			PP_PowerPlant::Char16	&outMark,			Str255					outName);		void ClickSelf(const SMouseDownEvent &inMouseDown);		bool GetNewColor(RGBColor& inColor, RGBColor& outColor);		void GetInfo(SShapeInfo& info) const;		void OrientFromInfo(const SShapeInfo info);		void WriteToStream(LStream* inStream);		void OrientFromStream(LStream* inStream);	//BUNNY CONSTRUCTOR	CShape(CShapeStore* info, CShapeInfo paneInfo);	void getNewShapeName(StringPtr outname);	// BUNNY METHODS	void getPicHandle(PicHandle &picture);	void setPict(StringPtr newPic);	void getName(StringPtr name);	void getPageT(Int32& outPageNum);	void getStart(Point& pt);	void getEnd(Point& pt);	void isMoveable(Boolean& isMoveable);	void isVisible(Boolean& isVis);	void getScript(StringPtr script);	void getPict(StringPtr pict);	void setStart(Point value);	void setEnd(Point value);	void setPictT(StringPtr name);	void setMoveable(bool moveable);	void setScript(StringPtr script);	void setPage(ResID id);	void setVisible(bool isVisible);	void MovePane(bool toPos);	void setName(StringPtr name);	Point centerAroundCursor (Point cursPos);	void onOver(Point cursPoint, CShape* dShape);	bool onDrop(Point cursPoint, CShape* dShape);	void Sing(StringPtr name);	void Beep();	void RunScript(TArray<CScriptAction *>actions);	void RunClickScript();	bool RunDropScript(CShape* dShape);	void RunEnterScript();	void CreateName();	bool isPossessed();		void DoDropTest(bool originallyPossessed, int origH, int origV);			void AdjustCursorSelf(Point inPortPt, const EventRecord& 	inMacEvent);				protected:		Point start,end;		RGBColor frameC;		RGBColor fillC;				// I would have liked to include a CCanvas pointer, but unfortunately,		// all my attempts to #include "CCanvas.h" were thwarted by the compiler.		// So I have to dynamically find its pointer every time. Oh well.	// BUNNY//	PicHandle picture;//	StringPtr pictureName;	CShapeStore* sInfo;	LPane* pos;	bool posessed;	int oldEndH, oldEndV;	int oldWidth,oldHeight;	//this is used only for playModeski.  Is initially set	//by data modelski and affected by scripts.	//Is good plan, da?	//Boolean visible;	bool highlighted;	bool isMoving;	SndChannel* mSoundChannel;};