// DM.h#pragma once#include <TArray.h>class LFileStream;class CPageStore;class CShapeStore;class CResStore;class DM {public:	DM();		virtual ~DM();		virtual void ReadFromFile(LFileStream* file);		virtual void WriteToFile(LFileStream* file);		// pages		virtual int getTotalPages();		virtual CPageStore* newPageStore();		virtual CPageStore* getPageStore(Int32 pageNum);		virtual CPageStore* getPageStore(ConstStringPtr name);		virtual TArray<CShapeStore*> getShapesInPage(Int32 pageNum);			virtual TArray<CPageStore*> getPageList();		virtual void removePageStore(ConstStringPtr name);		virtual void removePageStore(Int32 pageNum);		// shapes		virtual int getTotalShapes();		virtual CShapeStore* newShapeStore();		virtual CShapeStore* getShapeStore(ConstStringPtr name);		virtual void updateShapePicts(ConstStringPtr oldPict, ConstStringPtr newPict);		virtual void updateShapePages(Int32 oldNum, Int32 newNum);		virtual TArray<CShapeStore*> getShapeList();		virtual void removeShapeStore(ConstStringPtr name);		// resources		virtual int getTotalPicts();		virtual int getTotalSounds();		virtual CResStore* newResStore(ConstStringPtr type);		virtual CResStore* getPictResStore(ConstStringPtr name);	virtual CResStore* getSoundResStore(ConstStringPtr name);	virtual TArray<CResStore*> getPictList();		virtual TArray<CResStore*> getSoundList();		virtual void removePictResStore(ConstStringPtr name);		virtual void removeSoundResStore(ConstStringPtr name);	// function for dirty bit setting when a store value is set	void Soil(bool isDirty);protected:		#pragma warn_hidevirtual off	// bypass some warnings the TArray causes	TArray<CPageStore*> mPages;		TArray<CShapeStore*> mShapes;		TArray<CResStore*> mPicts;		TArray<CResStore*> mSounds;	#pragma warn_hidevirtual reset		virtual void updatePageNums(Int32 deletedNum);		virtual void removeShapesInPage(Int32 pageNum);		virtual void removeAllStores();};#include <LComparator.h>class	CStoreNameComparator : public LComparator {public:		CStoreNameComparator();		virtual ~CStoreNameComparator();				virtual SInt32 Compare(						const void* inItemOne,						const void* inItemTwo,						UInt32 inSizeOne,						UInt32 inSizeTwo) const;};const ConstStringPtr TYPE		= "\ptype";const ConstStringPtr PAGE		= "\ppage";const ConstStringPtr SHAPE		= "\pshape";const ConstStringPtr SOUND		= "\psound";const ConstStringPtr kPICT		= "\ppict";const ConstStringPtr NAME		= "\pname";const ConstStringPtr kNAME		= "\pname";const ConstStringPtr PAGENUM	= "\ppagenum";