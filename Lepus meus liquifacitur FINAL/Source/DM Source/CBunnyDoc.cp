// CBunnyDoc.cp#include <LFile.h>//#include <LPlaceHolder.h>//#include <LPrintout.h>#include <LString.h>#include <LWindow.h>#include <PP_Messages.h>#include <UMemoryMgr.h>#include <UWindows.h>#include "CBunnyDoc.h"#include "DM.h"#include "CDocumentApp.h"// ---------------------------------------------------------------------------------//		¥ CBunnyDoc(LCommander*, FSSpec*)// ---------------------------------------------------------------------------------CBunnyDoc::CBunnyDoc(	LCommander	*inSuper,	FSSpec		*inFileSpec )		: LSingleDoc( inSuper ){		if (mCanvas != NULL) {	//	mCanvas->removeMe();taken out - might be needed AJ 3/6	}	mCanvas = NULL;//is hack, nyet?  AJ 3/7	mData = ((CDocumentApp*)inSuper)->GetData();	// Create window for our document.	mWindow = nil;	mWindow = LWindow::CreateWindow(kBunnyWindowID, this );//BTEST	ThrowIfNil_(mWindow);//BTEST	//mWindow->AddAttachment(new LUndoer());	// Create and attach the LUndoer												// Could attach to the Window or Application	// Specify that the view should be the	// target when the window is activated.	// BUNNY ADDITION ***************************BTEST	/*mCanvas = (CCanvas *)((CDocumentApp*) inSuper)->CreateCCanv(mData->getTotalPages());//FindPaneInMyWindow(mWindow,kCanvasID);	Assert_(mCanvas);	mPos = (CPosessions *)((CDocumentApp*) inSuper)->CreateCPos();	ThrowIfNil_(mWindow);	mCanvas->FinishCreateSelf();	mCanvas->PutInside(mWindow);	mPos->FinishCreateSelf();	mPos->PutInside(mWindow);*///LCommander::SetDefaultCommander(this); // ejs	mPos = NULL;	HydrateFirstPage();//jesus! more red. . .//***************** Eric added this	CCatalogWin *win = ((CDocumentApp*)inSuper)->getCatalogWin();	win->SetSuperCommander(this);		CPalette *pal = ((CDocumentApp*)inSuper)->GetCPalettePtr();	pal->SetSuperCommander(this);	//***************** 	if ( inFileSpec == nil ) {		// Set the name of new window.		NameNewDoc();	} else {		// Display contents of file in window.		OpenFile( *inFileSpec );	}		// Make the window visible.	mWindow->Show();}//*********** Eric Added this ****************/CBunnyDoc::~CBunnyDoc() {	CDocumentApp *app = (CDocumentApp *)LCommander::GetTopCommander();	app->getCatalog()->ClearWholeList();	app->MakeEditMode();// eric	CCatalogWin *win = app->getCatalogWin();	win->SetSuperCommander(app);		CPalette *pal = app->GetCPalettePtr();	pal->SetSuperCommander(app);}//*********** // ---------------------------------------------------------------------------------//		¥ NameNewDoc// ---------------------------------------------------------------------------------voidCBunnyDoc::NameNewDoc(){	// Setup the window title. Start with the default title.	LStr255	theTitle( "\pUntitled" );	// Find the first available title. We could also check the window	// pane id if we wanted to make sure we didn't collide with other	// window types.	Int32	theNumber = 0;	while ( UWindows::FindNamedWindow( theTitle ) != nil ) {		// An existing window has the current name		// Increment counter and try again.		++theNumber;		theTitle = "\pUntitled ";		theTitle += static_cast<SInt32>(theNumber);	}				// Finally, set window title.	mWindow->SetDescriptor( theTitle );}// ---------------------------------------------------------------------------------//		¥ OpenFile// ---------------------------------------------------------------------------------voidCBunnyDoc::OpenFile(	FSSpec	&inFileSpec ){  	mFile = nil;	mWindow = LWindow::CreateWindow(kBunnyWindowID, this );	ThrowIfNil_(mWindow);	// Create a new file object.	PP_PowerPlant::StDeleter<PP_PowerPlant::LFileStream>					theFile( new PP_PowerPlant::LFileStream( inFileSpec ) );	mData = ((CDocumentApp*)LCommander::GetTopCommander())->GetData();	mData->ReadFromFile(theFile.Get()); // suzanne ?	// Set the window title to the name of the file and	// flag that the document has an associated file.	mWindow->SetDescriptor( inFileSpec.name );	mIsSpecified = true;	mFile = theFile.Release();	// take over ownership of the file object		HydrateFirstPage();	((CDocumentApp *) GetTopCommander())->SetDirty(false); // opening file not make dirty!}// ---------------------------------------------------------------------------------//		¥ IsModified// ---------------------------------------------------------------------------------BooleanCBunnyDoc::IsModified(){	// Document has changed if the view is dirty.	mIsModified =  ((CDocumentApp *) GetTopCommander())->GetDirty();	//if (((CDocumentApp *) GetTopCommander())->inPlay()) mIsModified = false;	return mIsModified;}// ---------------------------------------------------------------------------------//		¥ DoAESave// ---------------------------------------------------------------------------------voidCBunnyDoc::DoAESave(	FSSpec	&inFileSpec,	OSType	inFileType ){	// Delete the existing file object.	// Note: this does nothing to the actual file on disk.	delete mFile;	mFile = nil;		// Make a new file object.	mFile = new PP_PowerPlant::LFileStream( inFileSpec );		// Get the proper file type.	OSType	theFileType = kBunnyDocFileType;	if ( inFileType != PP_PowerPlant::fileType_Default ) {		theFileType = inFileType;	}		// Make new file on disk	mFile->CreateNewDataFile(kBunnyAppCreatorCode, theFileType, 0);	// data fork only	// Write out the data.	DoSave();	// Change window title to reflect the new name.	mWindow->SetDescriptor( inFileSpec.name );	// Document now has a specified file.	mIsSpecified = true;		//m}// ---------------------------------------------------------------------------------//		¥ DoSave// ---------------------------------------------------------------------------------voidCBunnyDoc::DoSave(){	CDocumentApp *app = (CDocumentApp*)LCommander::GetTopCommander();	if (app->inPlay()) {		mData = app->GetDataBak();	} else {		mData = app->GetData();	}	mData->WriteToFile((LFileStream*)mFile);	app->SetDirty( false , true);}// ---------------------------------------------------------------------------------//		¥ DoRevert// ---------------------------------------------------------------------------------voidCBunnyDoc::DoRevert(){	//mData = ((CDocumentApp*)LCommander::GetTopCommander())->GetData();	//mData->ReadFromFile((LFileStream*)mFile); // ?		//mCanvas->PostAction(NULL);	//mCanvas->Refresh();	//SwitchTarget(mCanvas); // ?	//mCanvas->SetDirty(false);}#pragma mark -#pragma mark === Bunny Functions ===void CBunnyDoc::HydrateFirstPage() {	CDocumentApp *app = (CDocumentApp*) LCommander::GetTopCommander();	if (mCanvas != NULL) delete mCanvas;	if (app->inPlay()) {		mWindow->ResizeWindowTo(kWindowW, kWindowHP);		mCanvas = (CCanvas *)((CDocumentApp*) LCommander::GetTopCommander())->CreateCCanv(startPageNum);		Assert_(mCanvas);		mCanvas->PutInside(mWindow);		mCanvas->SetShapes();		mCanvas->Refresh();		mPos = (CPosessions *)app->CreateCPos();		mPos->FinishCreateSelf();		mPos->PutInside(mWindow);		mCanvas->TellShapesEnter();			// sja//		LCommander* test = LCommander::GetTarget();	} else {		mWindow->ResizeWindowTo(kWindowW, kWindowHE);		mCanvas = (CCanvas *)((CDocumentApp*) LCommander::GetTopCommander())->CreateCCanv(startPageNum);		Assert_(mCanvas);		if (mPos != NULL) delete mPos;		mCanvas->PutInside(mWindow);		mCanvas->SetShapes();		mCanvas->Refresh();		SwitchTarget(mCanvas);	}//	SwitchTarget(mCanvas);//	app->UpdateMenus(); // WE SHOUND'T HAVE TO DO THIS!!!!}void CBunnyDoc::SetCurrentPage(CCanvas* inPage) {	mCanvas = inPage;}void CBunnyDoc::getCurrentPage(Int32 &pageNum) {	if (mCanvas) mCanvas->getPage(pageNum);	else pageNum = -1;}