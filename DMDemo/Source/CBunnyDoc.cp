// CBunnyDoc.cp#include <LFile.h>//#include <LPlaceHolder.h>//#include <LPrintout.h>#include <LString.h>#include <LWindow.h>#include <PP_Messages.h>#include <UMemoryMgr.h>#include <UWindows.h>#include "CBunnyDoc.h"#include "DM.h"#include "BunnyConstants.h"#include "CDocumentApp.h"// ---------------------------------------------------------------------------------//		¥ CBunnyDoc(LCommander*, FSSpec*)// ---------------------------------------------------------------------------------CBunnyDoc::CBunnyDoc(	LCommander	*inSuper,	FSSpec		*inFileSpec )		: LSingleDoc( inSuper ){	// Create window for our document.	mWindow = nil;	mWindow = LWindow::CreateWindow(kBunnyWindowID, this );	ThrowIfNil_(mWindow);	//mWindow->AddAttachment(new LUndoer());	// Create and attach the LUndoer												// Could attach to the Window or Application	// Specify that the view should be the	// target when the window is activated.		//mCanvas = dynamic_cast<CCanvas *> (mWindow->FindPaneByID(kCanvasPaneID));	//ThrowIfNil_( mCanvas );	//mWindow->SetLatentSub( mCanvas );			mData = ((CDocumentApp*)inSuper)->GetData();	if ( inFileSpec == nil ) {		// Set the name of new window.		NameNewDoc();	} else {		// Display contents of file in window.		OpenFile( *inFileSpec );	}		// Make the window visible.	mWindow->Show();}// ---------------------------------------------------------------------------------//		¥ NameNewDoc// ---------------------------------------------------------------------------------voidCBunnyDoc::NameNewDoc(){	// Setup the window title. Start with the default title.	LStr255	theTitle( "\pUntitled" );	// Find the first available title. We could also check the window	// pane id if we wanted to make sure we didn't collide with other	// window types.	Int32	theNumber = 0;	while ( UWindows::FindNamedWindow( theTitle ) != nil ) {		// An existing window has the current name		// Increment counter and try again.		++theNumber;		theTitle = "\pUntitled ";		theTitle += static_cast<SInt32>(theNumber);	}				// Finally, set window title.	mWindow->SetDescriptor( theTitle );}// ---------------------------------------------------------------------------------//		¥ OpenFile// ---------------------------------------------------------------------------------voidCBunnyDoc::OpenFile(	FSSpec	&inFileSpec ){  	mFile = nil;		// Create a new file object.	PP_PowerPlant::StDeleter<PP_PowerPlant::LFileStream>					theFile( new PP_PowerPlant::LFileStream( inFileSpec ) );		mData->ReadFromFile(theFile.Get()); // ?	// Set the window title to the name of the file and	// flag that the document has an associated file.	mWindow->SetDescriptor( inFileSpec.name );	mIsSpecified = true;	mFile = theFile.Release();	// take over ownership of the file object}// ---------------------------------------------------------------------------------//		¥ IsModified// ---------------------------------------------------------------------------------BooleanCBunnyDoc::IsModified(){	// Document has changed if the view is dirty.	mIsModified = false; // mCanvas->GetDirty();	return mIsModified;}// ---------------------------------------------------------------------------------//		¥ DoAESave// ---------------------------------------------------------------------------------voidCBunnyDoc::DoAESave(	FSSpec	&inFileSpec,	OSType	inFileType ){	// Delete the existing file object.	// Note: this does nothing to the actual file on disk.	delete mFile;	mFile = nil;		// Make a new file object.	mFile = new PP_PowerPlant::LFileStream( inFileSpec );		// Get the proper file type.	OSType	theFileType = kBunnyDocFileType;	if ( inFileType != PP_PowerPlant::fileType_Default ) {		theFileType = inFileType;	}		// Make new file on disk	mFile->CreateNewDataFile(kBunnyDocFileType, theFileType, 0);	// data fork only	// Write out the data.	DoSave();	// Change window title to reflect the new name.	mWindow->SetDescriptor( inFileSpec.name );	// Document now has a specified file.	mIsSpecified = true;}// ---------------------------------------------------------------------------------//		¥ DoSave// ---------------------------------------------------------------------------------voidCBunnyDoc::DoSave(){	mData->WriteToFile((LFileStream*)mFile);		//mCanvas->SetDirty( false );}// ---------------------------------------------------------------------------------//		¥ DoRevert// ---------------------------------------------------------------------------------voidCBunnyDoc::DoRevert(){		mData->ReadFromFile((LFileStream*)mFile); // ?		//mCanvas->PostAction(NULL);	//mCanvas->Refresh();	//SwitchTarget(mCanvas); // ?	//mCanvas->SetDirty(false);}